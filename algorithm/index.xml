<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on To Be A Better Man</title>
    <link>https://gru.tsecloud.club/algorithm/</link>
    <description>Recent content in Algorithms on To Be A Better Man</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jun 2018 22:40:41 +0800</lastBuildDate>
    
	<atom:link href="https://gru.tsecloud.club/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基础算法-快速排序</title>
      <link>https://gru.tsecloud.club/algorithm/fast_sort/</link>
      <pubDate>Thu, 21 Jun 2018 22:40:41 +0800</pubDate>
      
      <guid>https://gru.tsecloud.club/algorithm/fast_sort/</guid>
      <description>递归是快速排序的基础，因此想要了解快速排序，就必须得知道递归，对于递归来说有两个重要的概念 基线条件，函数结束调用自身的条件 递归条件，函数调用</description>
    </item>
    
    <item>
      <title>基础算法-选择排序</title>
      <link>https://gru.tsecloud.club/algorithm/select_sort/</link>
      <pubDate>Fri, 01 Jun 2018 22:51:07 +0800</pubDate>
      
      <guid>https://gru.tsecloud.club/algorithm/select_sort/</guid>
      <description>原理 选择排序就是将一个有序的元素集合，将其第一个元素于后面的元素进行比对， 找出符合条件的的元素，并将符合条件的元素从该集合中剔除，存储到新的</description>
    </item>
    
    <item>
      <title>基础算法-二分查找</title>
      <link>https://gru.tsecloud.club/algorithm/binary_search/</link>
      <pubDate>Tue, 29 May 2018 23:38:46 +0800</pubDate>
      
      <guid>https://gru.tsecloud.club/algorithm/binary_search/</guid>
      <description>前提，被查找的列表必须是有序的,对于二分查找而言，其时间的复杂度为对数时间(O(log n)) &amp;lt;?php function binary_search(array $list, int $item):int { $low = 0; $high = count($list) - 1; // 判断数组是否为空 if($high &amp;lt;</description>
    </item>
    
    <item>
      <title>算法-大O表示法</title>
      <link>https://gru.tsecloud.club/algorithm/big-o/</link>
      <pubDate>Thu, 17 May 2018 00:21:51 +0800</pubDate>
      
      <guid>https://gru.tsecloud.club/algorithm/big-o/</guid>
      <description>算法-大O表示法 大O表示法通常用来表示一个算法的执行效率， 而算法的执行效率则以相对于输入N的操作步骤来衡量，而这些步骤则考虑的是最坏情况下执</description>
    </item>
    
  </channel>
</rss>