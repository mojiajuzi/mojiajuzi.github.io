<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To Be A Better Man</title>
    <link>https://mojiajuzi.github.io/</link>
    <description>Recent content on To Be A Better Man</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 May 2018 22:58:56 +0800</lastBuildDate>
    
	<atom:link href="https://mojiajuzi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flutter 基础组件-容器</title>
      <link>https://mojiajuzi.github.io/dart/flutter-widget-continer/</link>
      <pubDate>Thu, 10 May 2018 22:58:56 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/dart/flutter-widget-continer/</guid>
      <description>Container Widget 本文章主要翻译于Widgets: Container 特点 该组件常常用来包含子组件,同时其本身也包含一些样式属性, 如果没有包含子组件的时候,将会自动填充屏幕</description>
    </item>
    
    <item>
      <title>Laravel 队列使用-Redis作为驱动</title>
      <link>https://mojiajuzi.github.io/php/laravel-event-redis/</link>
      <pubDate>Mon, 07 May 2018 22:23:05 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/php/laravel-event-redis/</guid>
      <description>准备工作 安装相对应的Redis包 $ composer require composer require predis/predis 修改配置文件.env,设置驱动 QUEUE_DRIVER=redis REDIS_HOST=redis REDIS_PASSWORD=null REDIS_PORT=6379 修改config/queue.php文件中redis队列连</description>
    </item>
    
    <item>
      <title>Laravel 队列使用-队列失败任务处理</title>
      <link>https://mojiajuzi.github.io/php/laravel-job-fail/</link>
      <pubDate>Fri, 04 May 2018 21:57:38 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/php/laravel-job-fail/</guid>
      <description>在config/queue.php文件的failed字段里面,可以配置失败任务的连接以及数据的存储 &amp;#39;failed&amp;#39; =&amp;gt; [ &amp;#39;database&amp;#39; =&amp;gt; env(&amp;#39;DB_CONNECTION&amp;#39;, &amp;#39;mysql&amp;#39;), &amp;#39;table&amp;#39; =&amp;gt; &amp;#39;failed_jobs&amp;#39;, ], 在使用artisan</description>
    </item>
    
    <item>
      <title>Laravel 队列使用-队列的触发与守护</title>
      <link>https://mojiajuzi.github.io/php/laravel-job-triger/</link>
      <pubDate>Thu, 03 May 2018 23:07:15 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/php/laravel-job-triger/</guid>
      <description>触发 任务的触发,主要的实现是在Illuminate\Foundation\Bus\DispatchesJobs这个trait中实现的,其只包</description>
    </item>
    
    <item>
      <title>Laravel 队列使用-队列的同步与异步</title>
      <link>https://mojiajuzi.github.io/php/laravel-job-part1/</link>
      <pubDate>Wed, 02 May 2018 22:42:46 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/php/laravel-job-part1/</guid>
      <description>关于Laravle所支持的驱动类型以及对应驱动的配置,请查看Laravel Queue, 在这里将会使用以数据库作为驱动来说明,Laravel队列的使用 准</description>
    </item>
    
    <item>
      <title>Laravel 事件监听简单使用</title>
      <link>https://mojiajuzi.github.io/php/laravel-event/</link>
      <pubDate>Fri, 27 Apr 2018 23:35:21 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/php/laravel-event/</guid>
      <description>定义事件与事件监听器, 在App\Providers\EventServiceProvider.php类的$listen中定义事件与事件监听者</description>
    </item>
    
    <item>
      <title>Laravel中安装和使用Redis作为会话和缓存的载体</title>
      <link>https://mojiajuzi.github.io/php/redis/</link>
      <pubDate>Thu, 08 Mar 2018 23:27:06 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/php/redis/</guid>
      <description>本人使用的是Laradock 作为开发环境 predis的安装 安装依赖包predis/predis composer require predis/predis 重新生成自动加载文件 composer dumpautoload 修改配置 修改.e</description>
    </item>
    
    <item>
      <title>Laravel自带的登录注册组件简单说明</title>
      <link>https://mojiajuzi.github.io/php/register/</link>
      <pubDate>Wed, 07 Mar 2018 21:48:05 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/php/register/</guid>
      <description>在这里我们需要理解Laravle中两个名词 - Guards:定义了对于每一个请求，如何对用户进行认证 - Providers: 定义了从哪里获取用户 使用脚手架生成登录</description>
    </item>
    
    <item>
      <title>Goroutine</title>
      <link>https://mojiajuzi.github.io/go/goruotine/</link>
      <pubDate>Tue, 13 Feb 2018 21:52:57 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/go/goruotine/</guid>
      <description>Goroutines Goroutine是由Go runtime管理的轻量级线程，开启一个新的Goroutine只需要使用go关键字，由于Goroutine运行在</description>
    </item>
    
    <item>
      <title>The HTTP Caddyfile</title>
      <link>https://mojiajuzi.github.io/go/http-caddyfile/</link>
      <pubDate>Tue, 06 Feb 2018 23:54:27 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/go/http-caddyfile/</guid>
      <description>站点地址(Site Addresses) HTTP服务使用站点地址作为labels层，地址的形式为scheme://host:port/path,当你填写地址的时</description>
    </item>
    
    <item>
      <title>Golang Middleware Part 1</title>
      <link>https://mojiajuzi.github.io/go/middleware_part_1/</link>
      <pubDate>Tue, 06 Feb 2018 23:30:40 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/go/middleware_part_1/</guid>
      <description>如何在Golang中实现中间件-Part 1 当使用net/http包实现服务的时候，一般使用的是如下的两中处理方式: http.HandleFunc http.Handle http.HandleFunc 分析 当使用这种方式的</description>
    </item>
    
    <item>
      <title>Caddyfile</title>
      <link>https://mojiajuzi.github.io/go/caddyfile/</link>
      <pubDate>Wed, 31 Jan 2018 23:07:05 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/go/caddyfile/</guid>
      <description>该文章将会向你展示使用Caddyfile配置Caddy是一件十分简单的事情 Caddyfile是一个文本文件，用来配置Caddy如何运行 该文件</description>
    </item>
    
    <item>
      <title>mysqldump备份工具的简单使用</title>
      <link>https://mojiajuzi.github.io/sql/sqldump/</link>
      <pubDate>Wed, 31 Jan 2018 20:40:58 +0800</pubDate>
      
      <guid>https://mojiajuzi.github.io/sql/sqldump/</guid>
      <description>导出某个数据库中的所有数据表,不包含表中的数据 mysqldump -hlocalhost -utest -p -P3306 -d database_name &amp;gt; /path 导出数据库中某张表的结构,不包含表中的数据 mysqldump -hlocalhost -utest -p -P3306 -d database_name table_name &amp;gt; /path 导出数据库中的</description>
    </item>
    
  </channel>
</rss>